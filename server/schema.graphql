type Query{
    getUsers(is_active:Boolean):[User!]!
    getUser(id:ID, email:String):User
    getEvents(is_active:Boolean,tag:String,city:String,date:String):[Event!]!
    getEvent(is:ID!):Event!
}

type Mutation{
    createUser(data:Useradd!):User!
    updateUser(id:ID!,data:Userupdate):User!
    deleteUser(id:ID!):User!
    createEvent(data:Eventadd):Event!
    updateEvent(id:ID!,data:Eventupdate):Event!
    deleteEvent(id:ID!):Event
}

input Eventadd{
    title:String!
    description:String!
    date:String!
    address:Addressadd
    created_by:String
    banner:String
    tags:[String]
}

input Eventupdate{
    title:String
    description:String
    address:Addressadd
    date:String
    banner:String
    tags:[String]
}

input Addressadd{
    street:String
    city:String
    number:String
    country:String
    state: String
    zip:String
    lat:Float
    long:Float
}

input Userupdate{
    first_name:String
    last_name:String
    gender:GENDER
    birth_date:String
    photo:String
}

input Useradd{
    first_name:String!
    last_name:String!
    email:String!
    password:String!
    birth_date:String
    gender: GENDER
    photo:String
}

type User{
    _id:ID
    first_name:String
    last_name:String
    email:String
    birth_date:String
    gender: GENDER
    photo:String
    events_create:[Event]
    events_assists:[Event]
    is_active:Boolean
    createdAt:String
    updatedAt:String
}

enum GENDER{
    M 
    F 
    O
}

type Event{
    _id:ID
    title:String
    description:String
    date:String
    address:Address
    assistants:[User]
    created_by:User
    banner:String
    tags:[String]
    is_active:Boolean
    createdAt:String
    updatedAt:String
}

type Address{
    street:String
    city:String
    number:String
    country:String
    state: String
    zip:String
    lat:Float
    long:Float
}